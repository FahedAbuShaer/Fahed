import numpy as np

def f(x, T):
    h = 6.62607015e-34
    c = 299792458
    k = 1.380649e-23
    B = ((2*h*(c**2))/(x**5))*(1/(np.exp((h*c)/(k*T*x))-1))
    return B

def df(x, T):
    h = 6.62607015e-34
    c = 299792458
    k = 1.380649e-23
    n = (2*h*(c**2))*(((5*x-((h*c)/(k*T)))*(x**3)*np.exp((h*c)/(k*T*x)))-1)
    d = ((x**5)*(np.exp((h*c)/(k*T*x))-1))**2
    dB = -(n/d)
    return dB

def NewtonRaphson(x0, T):
    eps = 10e-7
    f0 = f(x0, T)
    df0 = df(x0, T)
    x = x0 - (f0/df0)
    while np.abs(f(x))>eps:
        f = f(x, T)
        df = df(x, T)
        x = x - (f/df)
    return x

T = 5800
x0 = 10
l = NewtonRaphson(x0, T)
print(l)